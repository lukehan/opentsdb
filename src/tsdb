#!/bin/bash

set -e
me=${0##*/}
mydir=`dirname "$0"`
for make in $MAKE make gmake; do
  # Try to weed out BSD make and such (they don't support those flags).
  $make --version --quiet >/dev/null 2>&1 && break
done
# TODO(tsuna): This is an ugly hack.  The TSD needs to execute
# src/graph/mygnuplot.sh and does so with a relative path to keep things
# simpler.  So we need to `cd' in the right directory...  This means that
# relative paths can't be given in argument to any of the commands.  XXX
cd "$mydir/.."
# TODO(tsuna): This is an ugly hack (sigh).  First of all, `printcp' leaves
# a trailing colon at the end of the classpath it prints.  We append `src'
# because that's where logback.xml is and it needs to be on the classpath
# for logback-core to find it (not the file itself but the directory
# containing it...)
CLASSPATH=`$make --quiet printcp`src || {
  echo >&2 "$make returned $?"
  echo >&2 'Please make sure you have GNU make installed in your PATH'
  exit 42
}

usage() {
  echo >&2 "usage: $me <command> [args]"
  echo 'Valid commands: fsck, import, mkmetric, query, tsd, scan, uid'
  exit 1
}

case $1 in
  (fsck)
    MAINCLASS=Fsck
    ;;
  (import)
    MAINCLASS=TextImporter
    ;;
  (mkmetric)
    shift
    set uid assign metrics "$@"
    MAINCLASS=UidManager
    ;;
  (query)
    MAINCLASS=CliQuery
    ;;
  (tsd)
    MAINCLASS=TSDMain
    ;;
  (scan)
    MAINCLASS=DumpSeries
    ;;
  (uid)
    MAINCLASS=UidManager
    ;;
  (*)
    echo >&2 "$me: error: unknown command '$1'"
    usage
    ;;
esac
shift

JAVA=${JAVA-'java'}
JVMARGS=${JVMARGS-'-enableassertions -enablesystemassertions'}
test -r "$mydir/tsdb.local" && . "$mydir/tsdb.local"
exec $JAVA $JVMARGS -classpath "$CLASSPATH" net.opentsdb.tools.$MAINCLASS "$@"
